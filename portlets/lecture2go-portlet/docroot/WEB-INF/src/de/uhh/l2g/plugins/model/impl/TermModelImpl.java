/*******************************************************************************
 * License
 * 
 * +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++
 * 
 * Lecture2Go 
 * 
 * The Lecture2Go software is based on the liferay portal 6.2-ga6
 * <http://www.liferay.com> (Copyright notice see below)
 * Lecture2Go <http://lecture2go.uni-hamburg.de> is an open source
 * platform for media management and distribution. Our goal is to
 * support the free access to knowledge because this is a component
 * of each democratic society. The open source software is aimed at
 * academic institutions and has to strengthen the blended learning.
 * All Lecture2Go plugins are continuously being developed and improved.
 * For more details please visit <http://lecture2go-open-source.rrz.uni-hamburg.de>
 * Copyright (c) 2013 - present University of Hamburg / Computer and Data Center (RRZ)
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *  
 * +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++
 * 
 * The Liferay Plugins SDK:
 * 
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 * 
 * +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++
 * 
 * Third Party Software
 * 
 * Lecture2Go uses third-party libraries which may be distributed under different licenses
 * to the above (but are compatible with the used GPL license). Informations about these
 * licenses and copyright informations are mostly detailed in the library source code or jars themselves.
 * You must agree to the terms of these licenses, in addition tothe above Lecture2Go source code license,
 * in order to use this software.
 ******************************************************************************/
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.uhh.l2g.plugins.model.Term;
import de.uhh.l2g.plugins.model.TermModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Term service. Represents a row in the &quot;LG_Term&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.uhh.l2g.plugins.model.TermModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TermImpl}.
 * </p>
 *
 * @author Iavor Sturm
 * @see TermImpl
 * @see de.uhh.l2g.plugins.model.Term
 * @see de.uhh.l2g.plugins.model.TermModel
 * @generated
 */
public class TermModelImpl extends BaseModelImpl<Term> implements TermModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a term model instance should use the {@link de.uhh.l2g.plugins.model.Term} interface instead.
	 */
	public static final String TABLE_NAME = "LG_Term";
	public static final Object[][] TABLE_COLUMNS = {
			{ "termId", Types.BIGINT },
			{ "parentId", Types.BIGINT },
			{ "languageId", Types.VARCHAR },
			{ "prefix", Types.VARCHAR },
			{ "year", Types.VARCHAR },
			{ "translation", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table LG_Term (termId LONG not null primary key,parentId LONG,languageId VARCHAR(75) null,prefix VARCHAR(75) null,year VARCHAR(75) null,translation VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LG_Term";
	public static final String ORDER_BY_JPQL = " ORDER BY term.year DESC";
	public static final String ORDER_BY_SQL = " ORDER BY LG_Term.year DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.uhh.l2g.plugins.model.Term"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.uhh.l2g.plugins.model.Term"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.de.uhh.l2g.plugins.model.Term"),
			true);
	public static long PREFIX_COLUMN_BITMASK = 1L;
	public static long YEAR_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.uhh.l2g.plugins.model.Term"));

	public TermModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _termId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTermId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _termId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Term.class;
	}

	@Override
	public String getModelClassName() {
		return Term.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("termId", getTermId());
		attributes.put("parentId", getParentId());
		attributes.put("languageId", getLanguageId());
		attributes.put("prefix", getPrefix());
		attributes.put("year", getYear());
		attributes.put("translation", getTranslation());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long termId = (Long)attributes.get("termId");

		if (termId != null) {
			setTermId(termId);
		}

		Long parentId = (Long)attributes.get("parentId");

		if (parentId != null) {
			setParentId(parentId);
		}

		String languageId = (String)attributes.get("languageId");

		if (languageId != null) {
			setLanguageId(languageId);
		}

		String prefix = (String)attributes.get("prefix");

		if (prefix != null) {
			setPrefix(prefix);
		}

		String year = (String)attributes.get("year");

		if (year != null) {
			setYear(year);
		}

		String translation = (String)attributes.get("translation");

		if (translation != null) {
			setTranslation(translation);
		}
	}

	@Override
	public long getTermId() {
		return _termId;
	}

	@Override
	public void setTermId(long termId) {
		_termId = termId;
	}

	@Override
	public long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(long parentId) {
		_parentId = parentId;
	}

	@Override
	public String getLanguageId() {
		if (_languageId == null) {
			return StringPool.BLANK;
		}
		else {
			return _languageId;
		}
	}

	@Override
	public void setLanguageId(String languageId) {
		_languageId = languageId;
	}

	@Override
	public String getPrefix() {
		if (_prefix == null) {
			return StringPool.BLANK;
		}
		else {
			return _prefix;
		}
	}

	@Override
	public void setPrefix(String prefix) {
		_columnBitmask |= PREFIX_COLUMN_BITMASK;

		if (_originalPrefix == null) {
			_originalPrefix = _prefix;
		}

		_prefix = prefix;
	}

	public String getOriginalPrefix() {
		return GetterUtil.getString(_originalPrefix);
	}

	@Override
	public String getYear() {
		if (_year == null) {
			return StringPool.BLANK;
		}
		else {
			return _year;
		}
	}

	@Override
	public void setYear(String year) {
		_columnBitmask = -1L;

		if (_originalYear == null) {
			_originalYear = _year;
		}

		_year = year;
	}

	public String getOriginalYear() {
		return GetterUtil.getString(_originalYear);
	}

	@Override
	public String getTranslation() {
		if (_translation == null) {
			return StringPool.BLANK;
		}
		else {
			return _translation;
		}
	}

	@Override
	public void setTranslation(String translation) {
		_translation = translation;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Term.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Term toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Term)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TermImpl termImpl = new TermImpl();

		termImpl.setTermId(getTermId());
		termImpl.setParentId(getParentId());
		termImpl.setLanguageId(getLanguageId());
		termImpl.setPrefix(getPrefix());
		termImpl.setYear(getYear());
		termImpl.setTranslation(getTranslation());

		termImpl.resetOriginalValues();

		return termImpl;
	}

	@Override
	public int compareTo(Term term) {
		int value = 0;

		value = getYear().compareTo(term.getYear());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Term)) {
			return false;
		}

		Term term = (Term)obj;

		long primaryKey = term.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TermModelImpl termModelImpl = this;

		termModelImpl._originalPrefix = termModelImpl._prefix;

		termModelImpl._originalYear = termModelImpl._year;

		termModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Term> toCacheModel() {
		TermCacheModel termCacheModel = new TermCacheModel();

		termCacheModel.termId = getTermId();

		termCacheModel.parentId = getParentId();

		termCacheModel.languageId = getLanguageId();

		String languageId = termCacheModel.languageId;

		if ((languageId != null) && (languageId.length() == 0)) {
			termCacheModel.languageId = null;
		}

		termCacheModel.prefix = getPrefix();

		String prefix = termCacheModel.prefix;

		if ((prefix != null) && (prefix.length() == 0)) {
			termCacheModel.prefix = null;
		}

		termCacheModel.year = getYear();

		String year = termCacheModel.year;

		if ((year != null) && (year.length() == 0)) {
			termCacheModel.year = null;
		}

		termCacheModel.translation = getTranslation();

		String translation = termCacheModel.translation;

		if ((translation != null) && (translation.length() == 0)) {
			termCacheModel.translation = null;
		}

		return termCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{termId=");
		sb.append(getTermId());
		sb.append(", parentId=");
		sb.append(getParentId());
		sb.append(", languageId=");
		sb.append(getLanguageId());
		sb.append(", prefix=");
		sb.append(getPrefix());
		sb.append(", year=");
		sb.append(getYear());
		sb.append(", translation=");
		sb.append(getTranslation());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("de.uhh.l2g.plugins.model.Term");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>termId</column-name><column-value><![CDATA[");
		sb.append(getTermId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentId</column-name><column-value><![CDATA[");
		sb.append(getParentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>languageId</column-name><column-value><![CDATA[");
		sb.append(getLanguageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>prefix</column-name><column-value><![CDATA[");
		sb.append(getPrefix());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>year</column-name><column-value><![CDATA[");
		sb.append(getYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>translation</column-name><column-value><![CDATA[");
		sb.append(getTranslation());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Term.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Term.class };
	private long _termId;
	private long _parentId;
	private String _languageId;
	private String _prefix;
	private String _originalPrefix;
	private String _year;
	private String _originalYear;
	private String _translation;
	private long _columnBitmask;
	private Term _escapedModel;
}
